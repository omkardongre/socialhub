name: Terraform Infra CI

on:
  workflow_run:
    workflows: ["CI - Build and Push to GHCR"]
    types:
      - completed

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image tag artifact (auth-service)
        uses: actions/download-artifact@v4
        with:
          name: auth-service-image-tag
          path: .
      - name: Download image tag artifact (user-service)
        uses: actions/download-artifact@v4
        with:
          name: user-service-image-tag
          path: .
      - name: Download image tag artifact (post-service)
        uses: actions/download-artifact@v4
        with:
          name: post-service-image-tag
          path: .
      - name: Download image tag artifact (notification-service)
        uses: actions/download-artifact@v4
        with:
          name: notification-service-image-tag
          path: .
      - name: Download image tag artifact (chat-service)
        uses: actions/download-artifact@v4
        with:
          name: chat-service-image-tag
          path: .
      - name: Download image tag artifact (media-service)
        uses: actions/download-artifact@v4
        with:
          name: media-service-image-tag
          path: .
      - name: Download image tag artifact (api-gateway)
        uses: actions/download-artifact@v4
        with:
          name: api-gateway-image-tag
          path: .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -no-color

      - name: Set image tag variables with fallback
        id: tags
        run: |
          get_tag() {
            local file="$1"
            local fallback="$2"
            if [ -f "$file" ]; then
              cat "$file"
            else
              echo "$fallback"
            fi
          }
          echo "AUTH=$(get_tag auth-service-image-tag/image-tag.txt ${{ secrets.LAST_AUTH_SERVICE_IMAGE_TAG }})" >> $GITHUB_ENV
          echo "USER=$(get_tag user-service-image-tag/image-tag.txt ${{ secrets.LAST_USER_SERVICE_IMAGE_TAG }})" >> $GITHUB_ENV
          echo "POST=$(get_tag post-service-image-tag/image-tag.txt ${{ secrets.LAST_POST_SERVICE_IMAGE_TAG }})" >> $GITHUB_ENV
          echo "NOTIFY=$(get_tag notification-service-image-tag/image-tag.txt ${{ secrets.LAST_NOTIFICATION_SERVICE_IMAGE_TAG }})" >> $GITHUB_ENV
          echo "CHAT=$(get_tag chat-service-image-tag/image-tag.txt ${{ secrets.LAST_CHAT_SERVICE_IMAGE_TAG }})" >> $GITHUB_ENV
          echo "MEDIA=$(get_tag media-service-image-tag/image-tag.txt ${{ secrets.LAST_MEDIA_SERVICE_IMAGE_TAG }})" >> $GITHUB_ENV
          echo "API=$(get_tag api-gateway-image-tag/image-tag.txt ${{ secrets.LAST_API_GATEWAY_IMAGE_TAG }})" >> $GITHUB_ENV

      - name: Terraform Apply (auto-approved)
        run: terraform apply -auto-approve \
          -var="ghcr_username=${{ secrets.GHCR_USERNAME }}" \
          -var="ghcr_pat=${{ secrets.GHCR_PAT }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="auth_service_image_tag=$AUTH" \
          -var="user_service_image_tag=$USER" \
          -var="post_service_image_tag=$POST" \
          -var="notification_service_image_tag=$NOTIFY" \
          -var="chat_service_image_tag=$CHAT" \
          -var="media_service_image_tag=$MEDIA" \
          -var="api_gateway_image_tag=$API"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  update-fallback-secrets:
    needs: terraform
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Update fallback image tag secrets
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
          REPO: ${{ github.repository }}
          AUTH: ${{ env.AUTH }}
          USER: ${{ env.USER }}
          POST: ${{ env.POST }}
          NOTIFY: ${{ env.NOTIFY }}
          CHAT: ${{ env.CHAT }}
          MEDIA: ${{ env.MEDIA }}
          API: ${{ env.API }}
        run: |
          echo "$GH_TOKEN" | gh auth login --with-token
          update_secret() {
            local name="$1"
            local value="$2"
            gh secret set "$name" --body "$value" --repo "$REPO"
          }
          update_secret LAST_AUTH_SERVICE_IMAGE_TAG "$AUTH"
          update_secret LAST_USER_SERVICE_IMAGE_TAG "$USER"
          update_secret LAST_POST_SERVICE_IMAGE_TAG "$POST"
          update_secret LAST_NOTIFICATION_SERVICE_IMAGE_TAG "$NOTIFY"
          update_secret LAST_CHAT_SERVICE_IMAGE_TAG "$CHAT"
          update_secret LAST_MEDIA_SERVICE_IMAGE_TAG "$MEDIA"
          update_secret LAST_API_GATEWAY_IMAGE_TAG "$API"
