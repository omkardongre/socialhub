version: "3.9"
services:
  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Message broker
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Single PostgreSQL instance with multiple databases
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_MULTIPLE_DATABASES: auth_db,user_db,post_db,notification_db,media_db,chat_db
      POSTGRES_MULTIPLE_USERS: auth_user,user_user,post_user,notification_user,media_user,chat_user
      POSTGRES_MULTIPLE_PASSWORDS: auth_pass,user_pass,post_pass,notification_pass,media_pass,chat_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database Admin Tool
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  # Cache & Message Broker
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Web UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis

  # Application Services
  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    ports:
      - "3001:3000"
    env_file:
      - ./apps/auth-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  user-service:
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
    ports:
      - "3002:3000"
    env_file:
      - ./apps/user-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  post-service:
    build:
      context: .
      dockerfile: ./apps/post-service/Dockerfile
    ports:
      - "3003:3000"
    env_file:
      - ./apps/post-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  media-service:
    build:
      context: .
      dockerfile: ./apps/media-service/Dockerfile
    ports:
      - "3004:3000"
    env_file:
      - ./apps/media-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  notification-service:
    build:
      context: .
      dockerfile: ./apps/notification-service/Dockerfile
    ports:
      - "3005:3000"
    env_file:
      - ./apps/notification-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  chat-service:
    build:
      context: .
      dockerfile: ./apps/chat-service/Dockerfile
    ports:
      - "3006:3000"
    env_file:
      - ./apps/chat-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend-nextjs/Dockerfile
    ports:
      - "3007:3000"
    env_file:
      - ./apps/frontend-nextjs/.env

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - ./api-gateway/.env
    depends_on:
      - auth-service
      - user-service
      - post-service
      - media-service
      - notification-service
      - chat-service

# Volumes for persistent data
volumes:
  postgres-data:
